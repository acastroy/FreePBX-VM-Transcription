#!/usr/bin/python
import email
import sys
import os
import smtplib
import base64
import random
import uuid
import json
from subprocess import Popen, PIPE
import re
try:
    import simplejson as json
except ImportError:
    import json
try:
    import httplib
except ImportError:
    import http.client as httplib

def globalconfig(item):
    configdict = {
                  'vm_transcription' : True, # Transcribe voicemail to text (requires Microsoft Azure Cognitive services subscription)
                  'transcription_string' : '{{{{TRANSCRIPTION}}}}', # String to search for in the email which will be replaced by the transcribed text
                  'ms_cognitive_api_key' : 'FILLMEIN!!!', # Microsoft Cognitive Services API string
                  'speech_language' : 'en-US', # Language for speech recognition
                  'vm_to_mp3' : True, # Convert voicemail audio to MP3
                  'temp_dir': '/tmp/conv', # Temp location for MP3 conversion. MUST BE WRITABLE!
                  'ffmpeg_location' : '/usr/bin/ffmpeg', # If vm_to_mp3 is True, location of ffmpeg executable
                  'check_html' : True # Check to see if message is HTML and set mimetype accordingly
                 }
    return configdict[item]

def speechrec(wavobj):
    """
    Sends wav attachment to Microsoft Bing Speech Recognition Service.
    """
    # Decode base64 attachment
    outobj = base64.b64decode(wavobj)
    # Set connection parameters
    authhost = 'api.cognitive.microsoft.com'
    authpath = '/sts/v1.0/issueToken'
    speechhost = 'speech.platform.bing.com'
    speechpath = '/recognize?scenarios=smd&appid=D4D52672-91D7-4C74-8AD8-42B1D98141A5&locale=' + globalconfig('speech_language') + "&format=json&device.os=FreePBX&version=3.0&instanceid=" + str(uuid.uuid4()) + "&requestid=" + str(uuid.uuid4())
    authheaders = {'Ocp-Apim-Subscription-Key' : globalconfig('ms_cognitive_api_key'),
                   'Content-Length' : '0'}
    conn = httplib.HTTPSConnection(authhost)
    # Get authentication token
    conn.request(method="POST", url=authpath, headers=authheaders, body="")
    response = conn.getresponse()
    token = response.read()
    # If we don't get a token then return
    if int(response.status) != 200:
        return "No transcription available - Auth Error: " + str(token)
    # Setup for transcription
    headerfields = {"Accept" : "application/json;text/xml",
                    "Content-Type" : 'audio/wav; codec="audio/pcm"; samplerate=8000; trustsourcerate=false'
                    }
    try:
        headerfields["Authorization"] = "Bearer " + token
    except:
        headerfields["Authorization"] = "Bearer " + token.decode('utf-8')
    conn = httplib.HTTPSConnection(speechhost)
    # Send wave file for transcription
    conn.request(method="POST", url=speechpath, headers=headerfields, body=outobj)
    resp = conn.getresponse()
    # If there's a problem then return
    if int(resp.status) != 200:
        return "No transcription available - Server Error: " + resp.read()
    respval = json.loads(resp.read())
    return respval['header']['name']
    
def examinehtml(textobject, contenttype):
    """
    Checks to see if HTML tags exist in the message and changes content type
    """
    if not globalconfig('check_html'):
        return contenttype
    if (('<html>' in textobject) and ('</html>' in textobject)):
        return 'text/html'
    else:
        return 'text/plain'

def vmtomp3(filename, wavobj):
    """
    Converts wav attachments to MP3. Requires FFMPEG
    """
    outobj = base64.b64decode(wavobj)
    if not globalconfig('vm_to_mp3'):
        return [filename, 'audio/x-wav', outobj]
    randfilename = str(random.randint(1,10000000000)) + filename
    newrandfilename = randfilename[:-3] + "mp3"
    try:
        tempwav = open(globalconfig('temp_dir') + '/' + randfilename, "w")
        tempwav.write(outobj)
        tempwav.close()
    except (Exception) as e:
        return [filename, 'audio/x-wav', outobj]
    ffcommand = [globalconfig('ffmpeg_location'), '-loglevel', 'error', '-i', globalconfig('temp_dir') + '/' + randfilename, '-ab', '16k', globalconfig('temp_dir') + '/' + newrandfilename]
    child = Popen(ffcommand, stdout=PIPE, stderr=PIPE)
    stdout, stderr = child.communicate()
    rc = child.returncode
    if rc == 0:
        mp3handle = open(globalconfig('temp_dir') + '/' + newrandfilename, 'r')
        mp3dump = mp3handle.read()
        try:
            os.remove(globalconfig('temp_dir') + '/' + randfilename)
        except:
            pass
        try:
            os.remove(globalconfig('temp_dir') + '/' + newrandfilename)
        except:
            pass
        return [filename[:-3] + 'mp3', 'audio/x-mpeg-3', mp3dump]
    else:
        return [filename, 'audio/x-wav', outobj]

# Get entire email from STDIN
parser = email.message_from_file(sys.stdin)
# If it's a multipart message we need to look for audio attachments
if parser.is_multipart():
    for payload in parser.walk():
        if payload.get_content_type() == 'text/plain':
            textobj = payload.get_payload()
            newcontenttype = examinehtml(textobj, payload.get_content_type())
            for key,value in payload.items():
                if key == 'Content-Type':
                    newheader = value.replace('text/plain', newcontenttype)
                    payload.replace_header(key,newheader)
        if payload.get_content_type() == 'audio/x-wav':
            waveobj = payload.get_payload()
            filename = payload.get_filename()
            # MP3 Conversion
            mp3conv = vmtomp3(filename, waveobj)
            # Transcription
            if globalconfig('vm_transcription'):
                speech = ""
                speech = speechrec(waveobj)
            # Iterate through headers and modify accordinglyl
            for key,value in payload.items():
                if key == 'Content-Type':
                    newheader = value.replace('audio/x-wav', mp3conv[1])
                    newheader = newheader.replace(filename, mp3conv[0])
                    payload.replace_header(key,newheader)
                if key == 'Content-Disposition':
                    newheader = value.replace(filename, mp3conv[0])
                    payload.replace_header(key,newheader)
            payload.set_payload(email.base64MIME.encode(mp3conv[2]))
    if globalconfig('vm_transcription'):
        outstr = str(parser).replace(globalconfig('transcription_string'), speech)
    else:
        outstr = str(parser).replace(globalconfig('transcription_string'), "No transcription.")
    # First line has garbage we don't need...
    indx1 = outstr.find('\n')
    # Output finished email to stdout
    sys.stdout.write(outstr[indx1+1:])
else:
    outstr = str(parser)
    if parser.get_content_type() == 'text/plain':
        textobj = parser.get_payload()
        newcontenttype = examinehtml(textobj, parser.get_content_type())
        for key,value in parser.items():
            if key == 'Content-Type':
                newheader = value.replace('text/plain', newcontenttype)
                parser.replace_header(key,newheader)
    outstr = outstr.replace('text/plain', newcontenttype)
    outstr = outstr.replace(globalconfig('transcription_string'), "No transcription.")
    # First line has garbage we don't need...
    indx1 = outstr.find('\n')
    # Output finished email to stdout
    sys.stdout.write(outstr[indx1+1:])
sys.exit()
